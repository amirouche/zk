(library (zk key-names)
  (export
   translate-key-seq
   %key->key-name)
  (import
    (except (chezscheme) define-record-type)
    (zk termbox))

  (define f-key-map
    `(("F1" . ,TB-KEY-F1)
      ("F2" . ,TB-KEY-F2)
      ("F3" . ,TB-KEY-F3)
      ("F4" . ,TB-KEY-F4)
      ("F5" . ,TB-KEY-F5)
      ("F6" . ,TB-KEY-F6)
      ("F7" . ,TB-KEY-F7)
      ("F8" . ,TB-KEY-F8)
      ("F9" . ,TB-KEY-F9)
      ("F10" . ,TB-KEY-F10)
      ("F11" . ,TB-KEY-F11)
      ("F12" . ,TB-KEY-F12)
      ("INSERT" . ,TB-KEY-INSERT)
      ("DELETE" . ,TB-KEY-DELETE)
      ("HOME" . ,TB-KEY-HOME)
      ("END" . ,TB-KEY-END)
      ("PGUP" . ,TB-KEY-PGUP)
      ("PGDN" . ,TB-KEY-PGDN)
      ("ARROW-UP" . ,TB-KEY-ARROW-UP)
      ("ARROW-DOWN" . ,TB-KEY-ARROW-DOWN)
      ("ARROW-LEFT" . ,TB-KEY-ARROW-LEFT)
      ("ARROW-RIGHT" . ,TB-KEY-ARROW-RIGHT)
      ("MOUSE-LEFT" . ,TB-KEY-MOUSE-LEFT)
      ("MOUSE-RIGHT" . ,TB-KEY-MOUSE-RIGHT)
      ("MOUSE-MIDDLE" . ,TB-KEY-MOUSE-MIDDLE)
      ("MOUSE-RELEASE" . ,TB-KEY-MOUSE-RELEASE)
      ("MOUSE-WHEEL-UP" . ,TB-KEY-MOUSE-WHEEL-UP)
      ("MOUSE-WHEEL-DOWN" . ,TB-KEY-MOUSE-WHEEL-DOWN)
      ("BACKSPACE" . ,TB-KEY-BACKSPACE)
      ("TAB" . ,TB-KEY-TAB)
      ("ENTER" . ,TB-KEY-ENTER)
      ("ESC" . ,TB-KEY-ESC)
      ("SPACE" . ,TB-KEY-SPACE)
      ("BACKSPACE2" . ,TB-KEY-BACKSPACE2)
      ("C-~" . ,TB-KEY-CTRL-TILDE)
      ("C-SPACE" . ,TB-KEY-CTRL-TILDE) ;; ctrl-space also colapse to this
      ("C-TILDE" . ,TB-KEY-CTRL-TILDE)
      ("C-2" . ,TB-KEY-CTRL-2)
      ("C-A" . ,TB-KEY-CTRL-A)
      ("C-B" . ,TB-KEY-CTRL-B)
      ("C-C" . ,TB-KEY-CTRL-C)
      ("C-D" . ,TB-KEY-CTRL-D)
      ("C-E" . ,TB-KEY-CTRL-E)
      ("C-F" . ,TB-KEY-CTRL-F)
      ("C-G" . ,TB-KEY-CTRL-G)
      ("C-H" . ,TB-KEY-CTRL-H)
      ("C-I" . ,TB-KEY-CTRL-I)
      ("C-J" . ,TB-KEY-CTRL-J)
      ("C-K" . ,TB-KEY-CTRL-K)
      ("C-L" . ,TB-KEY-CTRL-L)
      ("C-M" . ,TB-KEY-CTRL-M)
      ("C-N" . ,TB-KEY-CTRL-N)
      ("C-O" . ,TB-KEY-CTRL-O)
      ("C-P" . ,TB-KEY-CTRL-P)
      ("C-Q" . ,TB-KEY-CTRL-Q)
      ("C-R" . ,TB-KEY-CTRL-R)
      ("C-S" . ,TB-KEY-CTRL-S)
      ("C-T" . ,TB-KEY-CTRL-T)
      ("C-U" . ,TB-KEY-CTRL-U)
      ("C-V" . ,TB-KEY-CTRL-V)
      ("C-W" . ,TB-KEY-CTRL-W)
      ("C-X" . ,TB-KEY-CTRL-X)
      ("C-Y" . ,TB-KEY-CTRL-Y)
      ("C-Z" . ,TB-KEY-CTRL-Z)
      ("C-[" . ,TB-KEY-CTRL-LSQ-BRACKET)
      ("C-LSQ-BRACKET" . ,TB-KEY-CTRL-LSQ-BRACKET)
      ("C-3" . ,TB-KEY-CTRL-3)
      ("C-4" . ,TB-KEY-CTRL-4)
      ("C-/" . ,TB-KEY-CTRL-BACKSLASH)
      ("C-BACKSLASH" . ,TB-KEY-CTRL-BACKSLASH)
      ("C-5" . ,TB-KEY-CTRL-5)
      ("C-]" . ,TB-KEY-CTRL-RSQ-BRACKET)
      ("C-RSQ-BRACKET" . ,TB-KEY-CTRL-RSQ-BRACKET)
      ("C-6" . ,TB-KEY-CTRL-6)
      ("C-7" . ,TB-KEY-CTRL-7)
      ("C-/" . ,TB-KEY-CTRL-SLASH)
      ("C-SLASH" . ,TB-KEY-CTRL-SLASH)
      ("C-_" . ,TB-KEY-CTRL-UNDERSCORE)
      ("C-UNDERSCORE" . ,TB-KEY-CTRL-UNDERSCORE)
      ("C-8" . ,TB-KEY-CTRL-8)))


  (define (%key->key-name key)
    "convert a key in termbox definition to an emacs-style key-name"
    (find (lambda (x)
	    (eq? (cdr x) key))
	  f-key-map))
  (define (%key-name->keys key-name)
    (cond
     ((eq? (string-length key-name) 1)
      (cons (string-ref key-name 0) '()))
     ((assoc key-name f-key-map) => (lambda (x)
                                      (cons (cdr x) '())))
     ((and (> (string-length key-name) 4)
           (string=? (substring key-name 0 4) "C-M-"))
      (cons TB-KEY-ESC (%key-name->keys
                        (string-append
                         "C-"
                         (substring key-name 4 (string-length key-name))))))
     ((string=? (substring key-name 0 2) "M-")
      (cons TB-KEY-ESC (%key-name->keys
                        (substring key-name 2 (string-length key-name)))))
     (else '())))

  (define (%split1 str)
    (let* ((len (string-length str))
           (fs (let lp ((i 0))
                 (if (< i len)
                     (if (char=? (string-ref str i) #\ )
                         i
                         (lp (+ i 1)))
                     len)))
           (es (let lp ((i fs))
                 (if (< i len)
                     (if (char=? (string-ref str i) #\ )
                         (lp (+ i 1))
                         i)
                     len))))
      (values (substring str 0 fs)
              (substring str es len))))

  (define (translate-key-seq k-seq)
    "Convert an emacs-style key-sequence to a list of Termbox keys,
     \"C-X\" will give `(,TB-KEY-CTRL-X)
     \"C-X C-S\" will give `(,TB-KEY-CTRL-X ,TB-KEY-CTRL-S)
     \"M-x\" will give `(,TB-KEY-ESC #\\x)
     \"C-M-X\" will give `(,TB-KEY-ESC ,TB-KEY-CTRL-X)
     \"C-X C-M-S\" will give `(,TB-KEY-CTRL-X ,TB-KEY-ESC ,TB-KEY-CTRL-S) "
    (if (eq? 0 (string-length k-seq))
        '()
        (let-values (((first rest)
                      (%split1 k-seq)))
          (append (%key-name->keys first)
                  (translate-key-seq rest))))))
